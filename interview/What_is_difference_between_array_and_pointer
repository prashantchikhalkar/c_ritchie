An array is an array and a pointer is a pointer, but in most cases array names are converted to pointers.

Here is an array: int a[7]

a contains space for seven integers, and you can put a value in one of them with an assignment, like this:
a[3] = 9;

Here is a pointer:
int *p;

p doesn't contain any spaces for integers, but it can point to a space for an integer. 
We can for example set it to point to one of the places in the array a, such as the first one:
p = &a[0];

What can be confusing is that you can also write this:
p = a;

This does not copy the contents of the array a into the pointer p (whatever that would mean). 
Instead, the array name a is converted to a pointer to its first element. 
So that assignment does the same as the previous one.

Now you can use p in a similar way to an array:
p[3] = 17;

The reason that this works is that the array dereferencing operator in C, "[ ]", is defined in terms of pointers. 
x[y] means: start with the pointer x, step y elements forward after what the pointer points to, and then take whatever is there. 

Using pointer arithmetic syntax, x[y] can also be written as *(x+y).

For this to work with a normal array, such as our a, the name a in a[3] must first be converted to a pointer (to the first element in a). 
Then we step 3 elements forward, and take whatever is there. 

In other words: take the element at position 3 in the array. (Which is the fourth element in the array, since the first one is numbered 0.)

So, in summary, array names in a C program are (in most cases) converted to pointers. 
One exception is when we use the sizeof operator on an array. 
If a was converted to a pointer in this contest, sizeof(a) would give the size of a pointer and not of the actual array, 
which would be rather useless, so in that case a means the array itself.

Can we increment the base address of array? Justify your answer.
 
No, 
Because once we initialize the array variable, the pointer points base address only & it's fixed  and constant pointer.

What is the output of program.

int a[5] = {1,2,3,4,5};
int *ptr = (int*) (&a +1);
int *ptr = (int*) (a+1); 

you see, for your program above, a and &a will have the same numerical value,
and I believe that's where your whole confusion lies.
You may wonder that if they are the same,the following should give the next address after a in both cases,
going by pointer arithmetic:

(&a+1) and (a+1)

But it's not so!!Base address of an array (a here) and Address of an array are not same! 
a and &a might be same numerically ,but they are not the same type. 

a is of type int* while &a is of type int (*)[5],ie , &a is a pointer to (address of ) and array of size 5.
But a as you know is the address of the first element of the array.Numerically they are the same.

But when you increment these two pointers/addresses, ie as (a+1) and (&a+1), the arithmetic is totally different.
While in the first case it "jumps" to the address of the next element in the array, 
in the latter case it jumps by 5 elements as that's what the size of an array of 5 elements.

What is output of the program?

int main()
{
            int arr[10];
            int *ptr = arr;
            ptr++;
            arr++;
            return 0;
}

The statement arr++ will give you lvalue error. 
Because hear you are trying to increment base address of array and by default base address of array is constant pointer
(constant value) so,
arr  =  arr+1;
i.e according to rule on LHS of assignment operator there always should be lvalue i.e variable not constant.
